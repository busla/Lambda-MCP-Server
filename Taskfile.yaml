version: '3'

vars:
  PYTHON_VERSION: "3.13"
  AWS_REGION: "eu-central-1"
  STACK_NAME: "mcp-lambda-container"

tasks:
  setup:
    desc: Setup UV package manager and Python environment
    cmds:
      - uv venv --python {{.PYTHON_VERSION}}
      - source .venv/bin/activate && uv sync

  build:
    desc: Build SAM application with container
    cmds:
      - sam build --use-container

  build-x86:
    desc: Build SAM application for x86_64 architecture
    cmds:
      - sam build --use-container --config-env x86_64

  build-arm64:
    desc: Build SAM application for ARM64 architecture
    cmds:
      - sam build --use-container --config-env arm64

  deploy:
    desc: Deploy SAM application to AWS
    cmds:
      - sam deploy --resolve-s3 --resolve-image-repos

  deploy-x86:
    desc: Deploy SAM application for x86_64 architecture
    cmds:
      - sam deploy --config-env x86_64 --resolve-s3 --resolve-image-repos

  deploy-arm64:
    desc: Deploy SAM application for ARM64 architecture
    cmds:
      - sam deploy --config-env arm64 --resolve-s3 --resolve-image-repos

  local-api:
    desc: Start local API Gateway for testing
    cmds:
      - sam local start-api --warm-containers EAGER

  test-local:
    desc: Test MCP server locally using uvicorn
    cmds:
      - source .venv/bin/activate && python -m app.main

  install-inspector:
    desc: Install MCP Inspector for testing
    cmds:
      - source .venv/bin/activate && uv add mcp-inspector

  test-inspector-list-servers:
    desc: List available MCP servers using Inspector CLI
    cmds:
      - source .venv/bin/activate && mcp-cli server list

  test-inspector-list-tools:
    desc: List tools on MCP server using Inspector CLI
    cmds:
      - echo "Usage task test-inspector-list-tools SERVER=server_name"
      - source .venv/bin/activate && mcp-cli tool list --server {{.SERVER}}

  test-inspector-call-tool:
    desc: Call a tool on MCP server using Inspector CLI
    cmds:
      - echo "Usage task test-inspector-call-tool SERVER=server_name TOOL=tool_name INPUT=json_input"
      - source .venv/bin/activate && mcp-cli tool call {{.TOOL}} --server {{.SERVER}} --input '{{.INPUT}}'

  test-inspector-read-resource:
    desc: Read a resource on MCP server using Inspector CLI
    cmds:
      - echo "Usage task test-inspector-read-resource SERVER=server_name URI=resource_uri"
      - source .venv/bin/activate && mcp-cli tool read {{.URI}} --server {{.SERVER}}

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf .aws-sam/
      - rm -rf .venv/

  lint:
    desc: Run code linting
    cmds:
      - source .venv/bin/activate && ruff check app/

  format:
    desc: Format code
    cmds:
      - source .venv/bin/activate && ruff format app/

  validate:
    desc: Validate SAM template
    cmds:
      - sam validate

  logs:
    desc: Tail Lambda function logs
    cmds:
      - sam logs -n McpServerFunction --stack-name {{.STACK_NAME}} --tail

  delete:
    desc: Delete CloudFormation stack
    cmds:
      - sam delete --stack-name {{.STACK_NAME}}

  test-deployed:
    desc: Test deployed MCP Lambda endpoint with StreamableHttp protocol
    cmds:
      - |
        curl -v -X POST https://872mcrydl1.execute-api.eu-central-1.amazonaws.com/prod/mcp/ \
          -H "Content-Type: application/json" \
          -H "Accept: application/json, text/event-stream" \
          -d '{
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
              "protocolVersion": "2024-11-05",
              "capabilities": {
                "roots": {"listChanged": true},
                "sampling": {}
              },
              "clientInfo": {
                "name": "test-client",
                "version": "1.0.0"
              }
            }
          }'

  test-deployed-tools:
    desc: Test deployed MCP Lambda tools/list endpoint
    cmds:
      - |
        curl -v -X POST https://872mcrydl1.execute-api.eu-central-1.amazonaws.com/prod/mcp/ \
          -H "Content-Type: application/json" \
          -H "Accept: application/json, text/event-stream" \
          -d '{
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/list",
            "params": {}
          }'

  test-inspector-npx:
    desc: Test MCP server using npx inspector CLI
    cmds:
      - echo "Testing MCP server with npx inspector..."
      - npx @modelcontextprotocol/inspector --config mcp_inspector_config.json

  all:
    desc: Complete setup, build, and deploy workflow
    cmds:
      - task: setup
      - task: validate
      - task: build
      - task: deploy
