services:
  mcp-server:
    build:
      context: ./server-http-python-lambda
      dockerfile: Dockerfile
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-west-2}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN}
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 10s
      timeout: 5s
      retries: 2

  mcp-proxy:
    build:
      context: .
      dockerfile: mcp-proxy.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - LAMBDA_URL=http://mcp-server:8080/2015-03-31/functions/function/invocations
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN}
    depends_on:
      mcp-server:
        condition: service_healthy
    networks:
      - mcp-network

  mcp-client:
    build:
      context: ./client-http-typescript-docker/client
      dockerfile: Dockerfile
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - NODE_ENV=development
      - MCP_URL=http://mcp-proxy:3000
      - MCP_TOKEN=${MCP_AUTH_TOKEN}
    depends_on:
      - mcp-proxy
    networks:
      - mcp-network
    stdin_open: true
    tty: true

networks:
  mcp-network:
    driver: bridge
